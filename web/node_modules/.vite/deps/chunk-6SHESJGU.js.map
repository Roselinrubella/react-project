{
  "version": 3,
  "sources": ["../../@restart/ui/esm/DropdownContext.js", "../../react-bootstrap/esm/useWrappedRefWithWarning.js"],
  "sourcesContent": ["import * as React from 'react';\r\nconst DropdownContext = /*#__PURE__*/React.createContext(null);\r\nexport default DropdownContext;", "import invariant from 'invariant';\r\nimport { useCallback } from 'react';\r\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\r\nexport default function useWrappedRefWithWarning(ref, componentName) {\r\n  // @ts-expect-error Ignore global __DEV__ variable\r\n  if (!(process.env.NODE_ENV !== \"production\")) return ref;\r\n\r\n  // eslint-disable-next-line react-hooks/rules-of-hooks\r\n  const warningRef = useCallback(refValue => {\r\n    !(refValue == null || !refValue.isReactComponent) ? process.env.NODE_ENV !== \"production\" ? invariant(false, `${componentName} injected a ref to a provided \\`as\\` component that resolved to a component instance instead of a DOM element. ` + 'Use `React.forwardRef` to provide the injected ref to the class component as a prop in order to pass it directly to a DOM element') : invariant(false) : void 0;\r\n  }, [componentName]);\r\n  // eslint-disable-next-line react-hooks/rules-of-hooks\r\n  return useMergedRefs(warningRef, ref);\r\n}"],
  "mappings": ";;;;;;;;;;;;;;AAAA,YAAuB;AACvB,IAAM,kBAAqC,oBAAc,IAAI;AAC7D,IAAO,0BAAQ;;;ACFf,uBAAsB;AACtB,mBAA4B;AAEb,SAAR,yBAA0C,KAAK,eAAe;AAEnE,MAAI,MAA0C,QAAO;AAGrD,QAAM,iBAAa,0BAAY,cAAY;AACzC,MAAE,YAAY,QAAQ,CAAC,SAAS,oBAAoB,WAAwC,iBAAAA,SAAU,OAAO,GAAG,aAAa,oPAAuP,QAAI,iBAAAA,SAAU,KAAK,IAAI;AAAA,EAC7Y,GAAG,CAAC,aAAa,CAAC;AAElB,SAAO,sBAAc,YAAY,GAAG;AACtC;",
  "names": ["invariant"]
}
