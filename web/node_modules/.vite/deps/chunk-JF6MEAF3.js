import {
  require_prop_types
} from "./chunk-YC7HU4YY.js";
import {
  useEventCallback
} from "./chunk-IQO6DWXU.js";
import {
  require_classnames
} from "./chunk-X5NPCFHA.js";
import {
  require_jsx_runtime
} from "./chunk-O2XCZMNU.js";
import {
  require_react
} from "./chunk-CBG3MKAY.js";
import {
  __toESM
} from "./chunk-EQCVQC35.js";

// node_modules/react-bootstrap/esm/CloseButton.js
var import_prop_types = __toESM(require_prop_types());
var React = __toESM(require_react());
var import_classnames = __toESM(require_classnames());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var propTypes = {
  /** An accessible label indicating the relevant information about the Close Button. */
  "aria-label": import_prop_types.default.string,
  /** A callback fired after the Close Button is clicked. */
  onClick: import_prop_types.default.func,
  /**
   * Render different color variant for the button.
   *
   * Omitting this will render the default dark color.
   */
  variant: import_prop_types.default.oneOf(["white"])
};
var CloseButton = React.forwardRef(({
  className,
  variant,
  "aria-label": ariaLabel = "Close",
  ...props
}, ref) => (0, import_jsx_runtime.jsx)("button", {
  ref,
  type: "button",
  className: (0, import_classnames.default)("btn-close", variant && `btn-close-${variant}`, className),
  "aria-label": ariaLabel,
  ...props
}));
CloseButton.displayName = "CloseButton";
CloseButton.propTypes = propTypes;
var CloseButton_default = CloseButton;

// node_modules/react-bootstrap/esm/ModalContext.js
var React2 = __toESM(require_react());
var ModalContext = React2.createContext({
  onHide() {
  }
});
var ModalContext_default = ModalContext;

// node_modules/react-bootstrap/esm/AbstractModalHeader.js
var React3 = __toESM(require_react());
var import_react = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var AbstractModalHeader = React3.forwardRef(({
  closeLabel = "Close",
  closeVariant,
  closeButton = false,
  onHide,
  children,
  ...props
}, ref) => {
  const context = (0, import_react.useContext)(ModalContext_default);
  const handleClick = useEventCallback(() => {
    context == null || context.onHide();
    onHide == null || onHide();
  });
  return (0, import_jsx_runtime3.jsxs)("div", {
    ref,
    ...props,
    children: [children, closeButton && (0, import_jsx_runtime2.jsx)(CloseButton_default, {
      "aria-label": closeLabel,
      variant: closeVariant,
      onClick: handleClick
    })]
  });
});
AbstractModalHeader.displayName = "AbstractModalHeader";
var AbstractModalHeader_default = AbstractModalHeader;

export {
  CloseButton_default,
  ModalContext_default,
  AbstractModalHeader_default
};
//# sourceMappingURL=chunk-JF6MEAF3.js.map
